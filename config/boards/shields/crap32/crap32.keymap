/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE_EN    0
#define _BASE_SK    1
#define _SYM_EN     2
#define _SYM_SK     3
#define _NAVI       4
#define _FKEYS      5
#define _NUMPAD     6

&sk {
    quick-release;
};

/ {
    macros {
        to_BASE_EN: to_BASE_EN {
            label = "ZM_to_BASE_EN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&to _BASE_EN>
                , <&kp LGUI(SPACE)>
                ;
        };

        to_BASE_SK: to_BASE_SK {
            label = "ZM_to_BASE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&to _BASE_SK>
                , <&kp LGUI(SPACE)>
                ;
        };

        tog_NAVI_IN: tog_NAVI_IN {
            label = "ZM_to_NAVI_IN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(80,100,2)>
                , <&tog _NAVI>
                ;
        };

        tog_NAVI_OUT: tog_NAVI_OUT {
            label = "ZM_to_NAVI_OUT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&tog _NAVI>
                ;
        };

        mo_NAVI: mo_NAVI {
            label = "ZM_mo_NAVI";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(80,100,2)>
                , <&macro_press &mo _NAVI>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&macro_release &mo _NAVI>
                ;
        };

        mo_SYM_EN: mo_SYM_EN {
            label = "ZM_mo_SYM_EN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(10,95,2)>
                , <&macro_press &mo _SYM_EN>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&macro_release &mo _SYM_EN>
                ;
        };

        mo_SYM_SK: mo_SYM_SK {
            label = "ZM_mo_SYM_SK";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(10,95,2)>
                , <&macro_press &mo _SYM_SK>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&macro_release &mo _SYM_SK>
                ;
        };

        mo_FKEYS: mo_FKEYS {
            label = "ZM_mo_FKEYS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(270,100,2)>
                , <&macro_press &mo _FKEYS>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&macro_release &mo _FKEYS>
                ;
        };

        tog_NUMPAD_IN: tog_NUMPAD_IN {
            label = "ZM_to_NUMPAD_IN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(200,100,2)>
                , <&tog _NUMPAD>
                ;
        };

        tog_NUMPAD_OUT: to_NUMPAD_OUT {
            label = "ZM_to_NUMPAD_OUT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(30,95,2)>
                , <&tog _NUMPAD>
                ;
        };

        to_BOOT: to_BOOT {
            label = "ZM_to_BOOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_RESET_L {
            timeout-ms = <50>;
            key-positions = <4 14 23>;
            bindings = <&rch A A>;
            layers = <_NAVI>;
        };

        combo_RESET_R {
            timeout-ms = <50>;
            key-positions = <5 15 24>;
//            bindings = <&rch A A>;
            bindings = <&bootloader>;
            layers = <_FKEYS>;
        };

        combo_EN_SK {
            timeout-ms = <50>;
            key-positions = <28 31>;
            bindings = <&to_BASE_SK>;
            layers = <_BASE_EN>;
        };

        combo_SK_EN {
            timeout-ms = <50>;
            key-positions = <28 31>;
            bindings = <&to_BASE_EN>;
            layers = <_BASE_SK>;
        };

        combo_ESC {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };

        combo_TAB {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };

        combo_DEL {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp DEL>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };
            
        combo_RET {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RET>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };
            
        combo_X {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp X>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };

        combo_PIPE_EN {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp PIPE>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_PIPE_SK {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp TILDE>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_lAltGr {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RALT>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };

        combo_rAltGr {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp RALT>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };
          
        combo_LPAR_EN {
            timeout-ms = <45>;
            key-positions = <11 13>;
            bindings = <&kp LPAR>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_LPAR_SK {
            timeout-ms = <45>;
            key-positions = <11 13>;
            bindings = <&kp RBRC>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_RPAR_EN {
            timeout-ms = <45>;
            key-positions = <16 18>;
            bindings = <&kp RPAR>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_RPAR_SK {
            timeout-ms = <45>;
            key-positions = <16 18>;
            bindings = <&kp PIPE>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_LBRC_EN {
            timeout-ms = <45>;
            key-positions = <1 3>;
            bindings = <&kp LBRC>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_LBRC_SK {
            timeout-ms = <45>;
            key-positions = <1 3>;
            bindings = <&kp RALT(N9)>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_RBRC_EN {
            timeout-ms = <45>;
            key-positions = <6 8>;
            bindings = <&kp RBRC>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_RBRC_SK {
            timeout-ms = <45>;
            key-positions = <6 8>;
            bindings = <&kp RALT(N0)>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_LBKT_EN {
            timeout-ms = <45>;
            key-positions = <20 22>;
            bindings = <&kp LBKT>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_LBKT_SK {
            timeout-ms = <45>;
            key-positions = <20 22>;
            bindings = <&kp RALT(LBKT)>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_RBKT_EN {
            timeout-ms = <45>;
            key-positions = <25 27>;
            bindings = <&kp RBKT>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_RBKT_SK {
            timeout-ms = <45>;
            key-positions = <25 27>;
            bindings = <&kp RALT(RBKT)>;
            layers = <_BASE_SK _SYM_SK>;
        };

        // combo_GRAVE {
        //     timeout-ms = <45>;
        //     key-positions = <1 2>;
        //     bindings = <&kp GRAVE>;
        //     layers = <_BASE _NUM_SYM>;
        // };

        // combo_TILDE {
        //     timeout-ms = <45>;
        //     key-positions = <7 8>;
        //     bindings = <&kp TILDE>;
        //     layers = <_BASE _NUM_SYM>;
        // };

        combo_FSLH {
            timeout-ms = <45>;
            key-positions = <6 7>;
            bindings = <&kp KP_DIVIDE>;
            layers = <_BASE_EN _SYM_EN _BASE_SK _SYM_SK>;
        };

        combo_BSLH_EN {
            timeout-ms = <45>;
            key-positions = <2 3>;
            bindings = <&kp BSLH>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_BSLH_SK {
            timeout-ms = <45>;
            key-positions = <2 3>;
            bindings = <&kp GRAVE>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_GT_EN {
            timeout-ms = <45>;
            key-positions = <25 26>;
            bindings = <&kp GT>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_GT_SK {
            timeout-ms = <45>;
            key-positions = <25 26>;
            bindings = <&kp RALT(DOT)>;
            layers = <_BASE_SK _SYM_SK>;
        };

        combo_LT_EN {
            timeout-ms = <45>;
            key-positions = <21 22>;
            bindings = <&kp LT>;
            layers = <_BASE_EN _SYM_EN>;
        };

        combo_LT_SK {
            timeout-ms = <45>;
            key-positions = <21 22>;
            bindings = <&kp RALT(COMMA)>;
            layers = <_BASE_SK _SYM_SK>;
        };
    };

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NAVI";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo_NAVI>, <&tog_NAVI_IN>;
        };
 
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NUMPAD";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo_FKEYS>, <&tog_NUMPAD_IN>;
        };

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_COPY_CUT";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };

        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_COPY_CUT";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(X)>;
        };

        ctrl_v: ctrl_v {
                compatible = "zmk,behavior-hold-tap";
                label = "CTRL_PASTA_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <400>;
                bindings = <&kp>, <&td3>;
        };

        gui_v: gui_v {
                compatible = "zmk,behavior-hold-tap";
                label = "GUI_PASTA_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <400>;
                bindings = <&kp>, <&td4>;
        };

        dh: diacritic-hold {
                compatible = "zmk,behavior-hold-tap";
                label = "NORMAL_TAP_DIA_HOLD";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <500>;
                quick-tap-ms = <400>;
                global-quick-tap;
                bindings = <&kp>, <&kp>;
        };

        bspctap: backsapce-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "BSPC_TAP_LSHIFT_HOLD";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <170>;
                // global-quick-tap;
                bindings = <&kp>, <&kp>;
        };

        spctap: space-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "SPACE_TAP_MO_SYM_HOLD";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <170>;
                // global-quick-tap;
                bindings = <&mo_NUM_SYM>, <&kp>;
        };

        rch: reset-combo-hold {
                compatible = "zmk,behavior-hold-tap";
                label = "RESET_COMBO_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <2500>;
                bindings = <&to_BOOT>, <&sys_reset>;
        };

        com_sem_en: comma_semicolon_en {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI_EN";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT)>;
        };

        com_sem_sk: comma_semicolon_sk {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI_SK";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp RALT(SEMI)>;
            mods = <(MOD_LSFT)>;
        };

        dot_col_en: dot_colon_en {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON_EN";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };

        dot_col_sk: dot_colon_sk {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON_SK";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp GT>;
            mods = <(MOD_LSFT)>;
        };

        sqt_dqt_sk: sqt_dqt_sk {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_DQT_SK";
            #binding-cells = <0>;
            bindings = <&kp RALT(SQT)>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };

        plus_multi: plus_multiply {
            compatible = "zmk,behavior-tap-dance";
            label = "PLUS_MULTIPLY";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
        };

        minus_div: minus_divide {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_DIVIDE";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer_en {
// -------------------------------    -------------------------------
// |  Q  |  W  |  F  |  P  |  B  |    |  K  |  L  |  U  |  Y  | ' " |
// |  A  |  R  |  S  |  T  |  G  |    |  M  |  N  |  E  |  I  |  O  |
//       |  Z  |  C  |  D  |  V  |    |  J  |  H  | , ; | . : |
//         | _NAVI | SHIFT(BSPC) |    | _NUM_SYM(SPC) | _FKEYS(_NUMPAD) |
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B      &kp K &kp L &kp U       &kp Y   &kp SQT
   &kp A &kp R &kp S &kp T &kp G      &kp M &kp N &kp E       &kp I   &kp O
         &kp Z &kp C &kp D &kp V      &kp J &kp H &com_sem_en &dot_col_en
         &td0 &bspctap LSHIFT BSPC    &spctap X SPACE &td1
                        >;
                };

                base_layer_sk {
// -------------------------------    -------------------------------
// |  Q  |  W  |  F  |  P  |  B  |    |  K  |  L  |  U  |  Y  | ' " |
// |  A  |  R  |  S  |  T  |  G  |    |  M  |  N  |  E  |  I  |  O  |
//       |  Z  |  C  |  D  |  V  |    |  J  |  H  | , ; | . : |
//         | _NAVI | SHIFT(BSPC) |    | _NUM_SYM(SPC) | _FKEYS(_NUMPAD) |
                        bindings = <
   &dh Q RBKT &kp W    &kp F    &dh P SQT &kp B      &kp K &dh L N2   &dh U LBKT  &dh Y N7 &sqt_dqt_sk
   &dh A N8   &kp R    &dh S N3 &dh T N5  &kp G      &kp M &dh N BSLH &dh E N0    &dh I N9 &dh O SEMI
              &dh Z N6 &dh C N4 &kp D     &kp V      &kp J &kp H      &com_sem_sk &dot_col_sk
              &td0  &bspctap LSHIFT BSPC          &spctap X SPACE &td1
                        >;
                };

//                 num_sym_layer {
// // -------------------------------    -------------------------------
// // |  !  |  @  |  #  |  $  |  %  |    |  ^  |  &  |  *  |  (  |  )  |
// // |  1  |  2  |  3  |  4  |  5  |    |  6  |  7  |  8  |  9  |  0  |
// //       |  ?  |  _  |  -  |  `  |    |  ~  |  +  |  =  |  |  |
// //                  | SPC | BSPC |    |      | RET |
//                         bindings = <
//    &kp EXCL &kp AT    &kp HASH  &kp DLLR  &kp PRCNT      &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR
//    &kp N1   &kp N2    &kp N3    &kp N4    &kp N5         &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
//             &kp QMARK &kp UNDER &kp MINUS &kp GRAVE      &kp TILDE &kp PLUS  &kp EQUAL &kp PIPE
//                                 &kp SPACE &kp BSPC       &none     &kp RET
//                         >;
//                 };

                sym_layer_en {
// -------------------------------    -------------------------------
// |  .  |  7  |  8  |  9  |  %  |    |  @  |  #  |  $  |  ^  |  &  |
// |  0  |  1  |  2  |  3  |     |    |     |  -  |  +  |  *  |  =  |
//       |  4  |  5  |  6  |  `  |    |  ~  |  _  |  !  |  ?  |
//                  | SPC | BSPC |    |      | RET |
                        bindings = <
   &kp KP_DOT &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp PRCNT      &kp AT    &kp HASH     &kp DLLR    &kp CARET       &kp AMPS
   &kp KP_N0  &kp KP_N1 &kp KP_N2 &kp KP_N3 &none          &none     &kp KP_MINUS &kp KP_PLUS &kp KP_MULTIPLY &kp EQUAL
              &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp GRAVE      &kp TILDE &kp UNDER    &kp EXCL    &kp QMARK
                                &kp SPACE &kp BSPC       &none     &kp RET
                        >;
                };

                sym_layer_sk {
// -------------------------------    -------------------------------
// |  .  |  7  |  8  |  9  |  %  |    |  @  |  #  |  $  |  ^  |  &  |
// |  0  |  1  |  2  |  3  |  '  |    |  ˇ  |  -  |  +  |  *  |  =  |
//       |  4  |  5  |  6  |  `  |    |  ~  |  _  |  !  |  ?  |
//                  | SPC | BSPC |    |      | RET |
                        bindings = <
   &kp KP_DOT &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp UNDER      &kp RALT(N2) &kp RALT(N3) &kp RALT(N4) &kp RALT(N6)    &kp RALT(N7)
   &kp KP_N0  &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp EQUAL      &kp PLUS     &kp KP_MINUS &kp KP_PLUS  &kp KP_MULTIPLY &kp MINUS
              &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp RALT(N1)   &kp RALT(N5) &kp QMARK    &kp DQT      &kp LT
                                  &kp SPACE &kp BSPC       &none        &kp RET
                        >;
                };

                navi_layer {
// ----------------------------------------    -----------------------------------
// | ESC    |      | c,v,x | c,v,x | PRSC |    | PGUP | HOME |  UP  | END  | DEL |
// | sSHIFT | sALT | sCTRL | sGUI  | INS  |    | PGDN | LEFT | DOWN | RGHT | RET |
//          |      | CALC  | TAB   | APP  |    | APP  | TAB  |      |      |
//                         | _BASE | BSPC |    | SPACE | BSPC |
                        bindings = <
   &kp ESC    &none    &ctrl_v LC(V) V &gui_v LG(V) V &kp PSCRN      &kp PG_UP &kp HOME &kp UP   &kp END   &kp DEL
   &sk LSHIFT &sk LALT &sk LCTRL       &sk LGUI       &kp INS        &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RET
              &none    &kp C_AL_CALC   &kp TAB        &kp K_APP      &kp K_APP &kp TAB  &none    &none
                                       &tog_NAVI_OUT  &kp BSPC       &kp SPACE &kp BSPC
                        >;
                };
                
                fkeys_layer {
// ------------------------------    ----------------------------------------
// | ESC | F1 | F2  | F3  | F4  |    | CALC | c,v,x | c,v,x |      |  DEL   |
// | RET | F5 | F6  | F7  | F8  |    | INS  | sGUI  | sCTRL | sALT | sSHIFT |
//       | F9 | F10 | F11 | F12 |    | APP  |  TAB  |       |      |
//                 | SPC | BSPC |    |      |       |
                        bindings = <
   &kp ESC &kp F1 &kp F2  &kp F3  &kp F4        &kp C_AL_CALC &gui_v LG(V) V &ctrl_v LC(V) V &none    &kp DEL
   &kp RET &kp F5 &kp F6  &kp F7  &kp F8        &kp INS       &sk LGUI       &sk LCTRL       &sk LALT &sk LSHIFT
           &kp F9 &kp F10 &kp F11 &kp F12       &kp K_APP     &kp TAB        &none           &none
                        &kp SPACE &kp BSPC      &none         &none
                        >;
                };

                numpad_layer {
// -------------------------------------------    -------------------------------
// | BT1     | BT2  | BT3   | BT4  | BT5     |    | + * |  7  |  8  |  9  |  .  |
// | RGB_EFF | VOL- | MUTE  | VOL+ | OUT_TOG |    | ESC |  4  |  5  |  6  |  0  |
//           | PREV | PLAYP | NEXT | BT CLR  |    | - / |  1  |  2  |  3  |
//                           | _BASE | BKSPC |    | ENTER | _BASE |
                        bindings = <
   &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &plus_multi   &kp KP_N9  &kp KP_N8  &kp KP_N7  &kp KP_DOT
   &rgb_ug RGB_EFF &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &out OUT_TOG      &kp ESC       &kp KP_N3  &kp KP_N2  &kp KP_N1  &kp KP_N0
                   &kp C_PREV   &kp C_PP     &kp C_NEXT   &bt BT_CLR        &minus_div    &kp KP_N6  &kp KP_N5  &kp KP_N4
                                    &tog_NUMPAD_OUT       &kp BSPC          &kp KP_ENTER  &tog_NUMPAD_OUT
                        >;
                };                
    };
};
