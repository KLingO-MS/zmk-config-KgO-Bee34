/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE    0
#define _NUM_SYM 1
#define _NAVI    2
#define _FKEYS   3
#define _NUMPAD  4

&sk {
    quick-release;
};

/ {
    macros {
        to_BASE: to_BASE {
            label = "ZM_to_BASE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(15,95,2)>
                , <&to _BASE>
                ;
        };

        to_NAVI: to_NAVI {
            label = "ZM_to_NAVI";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(80,100,3)>
                , <&to _NAVI>
                ;
        };

        mo_NAVI: mo_NAVI {
            label = "ZM_mo_NAVI";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(80,100,3)>
                , <&macro_press &mo _NAVI>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,2)>
                , <&macro_release &mo _NAVI>
                ;
        };


        mo_NUM_SYM: mo_NUM_SYM {
            label = "ZM_mo_NUM_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(10,75,2)>
                , <&macro_press &mo _NUM_SYM>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,2)>
                , <&macro_release &mo _NUM_SYM>
                ;
        };

        mo_FKEYS: mo_FKEYS {
            label = "ZM_mo_FKEYS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_COLOR_HSB(300,100,3)>
                , <&macro_press &mo _FKEYS>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(15,95,2)>
                , <&macro_release &mo _FKEYS>
                ;
        };

        to_NUMPAD: to_NUMPAD {
            label = "ZM_to_NUMPAD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(200,100,3)>
                , <&to _NUMPAD>
                ;
        };

        to_BOOT: to_BOOT {
            label = "ZM_to_BOOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,100)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_RESET {
            timeout-ms = <50>;
            key-positions = <4 14 23>;
            bindings = <&rch A A>;
            layers = <_NUMPAD>;
        };

        combo_LPAR {
            timeout-ms = <30>;
            key-positions = <13 14>;
            bindings = <&kp LPAR>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RPAR {
            timeout-ms = <30>;
            key-positions = <15 16>;
            bindings = <&kp RPAR>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LBRC {
            timeout-ms = <30>;
            key-positions = <3 4>;
            bindings = <&kp LBRC>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RBRC {
            timeout-ms = <30>;
            key-positions = <5 6>;
            bindings = <&kp RBRC>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LBKT {
            timeout-ms = <30>;
            key-positions = <22 23>;
            bindings = <&kp LBKT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_RBKT {
            timeout-ms = <30>;
            key-positions = <24 25>;
            bindings = <&kp RBKT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_LT {
            timeout-ms = <30>;
            key-positions = <3 13>;
            bindings = <&kp LT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_GT {
            timeout-ms = <30>;
            key-positions = <6 16>;
            bindings = <&kp GT>;
            layers = <_BASE _NUM_SYM>;
        };

        combo_SQT {
            timeout-ms = <30>;
            key-positions = <7 17>;
            bindings = <&kp SQT>;
            layers = <_BASE _SYM>;
        };

        combo_DQT {
            timeout-ms = <30>;
            key-positions = <2 12>;
            bindings = <&kp DQT>;
            layers = <_BASE _SYM>;
        };

        combo_FSLH {
            timeout-ms = <30>;
            key-positions = <8 18>;
            bindings = <&kp FSLH>;
            layers = <_BASE _SYM>;
        };

        combo_BSLH {
            timeout-ms = <30>;
            key-positions = <1 11>;
            bindings = <&kp BSLH>;
            layers = <_BASE _SYM>;
        };
    };

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NAVI";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo_NAVI>, <&to_NAVI>;
        };
 
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_NUMPAD";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&mo_FKEYS>, <&to_NUMPAD>;
        };

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_COPY_PASTA";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

        ctrl_x: ctrl_x {
                compatible = "zmk,behavior-hold-tap";
                label = "CTRL_CUT_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <400>;
                bindings = <&kp>, <&td3>;
        };

        gui_x: gui_x {
                compatible = "zmk,behavior-hold-tap";
                label = "GUI_CUT_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <400>;
                bindings = <&kp>, <&td4>;
        };

        gqt: global-quick-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "GLOBAL_QUICK_TAP";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <100>;
                global-quick-tap;
                bindings = <&kp>, <&kp>;
        };

        spctap: space-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "SPACE_TAP_MO_SYM_HOLD";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <100>;
                global-quick-tap;
                bindings = <&mo_NUM_SYM>, <&kp>;
        };

        rch: reset-combo-hold {
                compatible = "zmk,behavior-hold-tap";
                label = "RESET_COMBO_HOLD";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = 3000>;
                bindings = <&to_BOOT>, <&sys_reset>;
        };

        com_sem: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT)>;
        };

        dot_col: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };

        plus_multi: plus_multiply {
            compatible = "zmk,behavior-tap-dance";
            label = "PLUS_MULTIPLY";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
        };

        minus_div: minus_divide {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_DIVIDE";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  Q  |  W  |  F  |  P  |  B  |    |  J  |  L  |  U  |  Y  |  Z  |
// |  A  |  R  |  S  |  T  |  G  |    |  M  |  N  |  E  |  I  |  O  |
//       |  X  |  C  |  D  |  V  |    |  K  |  H  | , ; | . : |
//         | _NAVI | SHIFT(BSPC) |    | _NUM_SYM(SPC) | _FKEYS(_NUMPAD) |
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B      &kp J &kp L &kp U    &kp Y   &kp Z
   &kp A &kp R &kp S &kp T &kp G      &kp M &kp N &kp E    &kp I   &kp O
         &kp X &kp C &kp D &kp V      &kp K &kp H &com_sem &dot_col
           &td0 &gqt LSHIFT BSPC      &spctap X SPACE &td1
                        >;
                };

                num_sym_layer {
// -------------------------------    -------------------------------
// |  !  |  @  |  #  |  $  |  %  |    |  ^  |  &  |  *  |  (  |  )  |
// |  1  |  2  |  3  |  4  |  5  |    |  6  |  7  |  8  |  9  |  0  |
//       |  |  |  =  |  +  |  ~  |    |  `  |  -  |  _  |  ?  |
//                  | SPC | BSPC |    |      | RET |
                        bindings = <
   &kp EXCL &kp AT   &kp HASH  &kp DLLR  &kp PRCNT      &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR
   &kp N1   &kp N2   &kp N3    &kp N4    &kp N5         &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
            &kp PIPE &kp EQUAL &kp PLUS  &kp TILDE      &kp GRAVE &kp MINUS &kp UNDER &kp QMARK
                               &kp SPACE &kp BSPC       &none     &kp RET
                        >;
                };

                navi_layer {
// ----------------------------------------    -----------------------------------
// | ESC    |      | c,v,x | c,v,x | PRSC |    | PGUP | HOME |  UP  | END  | DEL |
// | sSHIFT | sALT | sCTRL | sGUI  | INS  |    | PGDN | LEFT | DOWN | RGHT | RET |
//          |      |       | TAB   | APP  |    |      | TAB  |      |      |
//                         | _BASE | BSPC |    | SPACE | _BASE |
                        bindings = <
   &kp ESC    &none    &ctrl_x LC(X) X &gui_x LG(X) X &kp PSCRN      &kp PG_UP &kp HOME &kp UP   &kp END   &kp DEL
   &sk LSHIFT &sk LALT &sk LCTRL       &sk LGUI       &kp INS        &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp RET
              &none    &none           &kp TAB        &kp K_APP      &none     &kp TAB  &none    &none
                                       &to_BASE       &kp BSPC       &kp SPACE &to_BASE
                        >;
                };
                
                fkeys_layer {
// ------------------------------    ----------------------------------------
// | ESC | F1 | F2  | F3  | F4  |    | CALC | c,v,x | c,v,x |      |  DEL   |
// | RET | F5 | F6  | F7  | F8  |    | INS  | sGUI  | sCTRL | sALT | sSHIFT |
//       | F9 | F10 | F11 | F12 |    | APP  |  TAB  |       |      |
//                 | SPC | BSPC |    |      |       |
                        bindings = <
   &kp ESC &kp F1 &kp F2  &kp F3  &kp F4        &kp C_AL_CALC &gui_x LG(X) X &ctrl_x LC(X) X &none    &kp DEL
   &kp RET &kp F5 &kp F6  &kp F7  &kp F8        &kp INS       &sk LGUI       &sk LCTRL       &sk LALT &sk LSHIFT
           &kp F9 &kp F10 &kp F11 &kp F12       &kp K_APP     &kp TAB        &none           &none
                        &kp SPACE &kp BSPC      &none         &none
                        >;
                };

                numpad_layer {
// -------------------------------------------    -------------------------------
// | BT1     | BT2  | BT3   | BT4  | BT5     |    | + * |  7  |  8  |  9  |  .  |
// | RGB_TOG | VOL- | MUTE  | VOL+ | OUT_TOG |    | ESC |  4  |  5  |  6  |  0  |
//           | PREV | PLAYP | NEXT | BT CLR  |    | - / |  1  |  2  |  3  |
//                           | _BASE | BKSPC |    | ENTER | _BASE |
                        bindings = <
   &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &plus_multi   &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_DOT
   &rgb_ug RGB_TOG &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &out OUT_TOG      &kp ESC       &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_N0
                   &kp C_PREV   &kp C_PP     &kp C_NEXT   &bt BT_CLR        &minus_div    &kp KP_N1  &kp KP_N2  &kp KP_N3
                                             &to_BASE     &kp BSPC          &kp KP_ENTER  &to_BASE
                        >;
                };                
    };
};